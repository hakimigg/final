{"ast":null,"code":"import { supabase, PRODUCTS_TABLE } from '../lib/supabase';\n\n/**\n * Product Entity\n * Represents furniture and decor products in the e-commerce system\n */\nexport class Product {\n  constructor(data = {}) {\n    this.id = data.id || null;\n    this.name = data.name || '';\n    this.description = data.description || '';\n    this.price = data.price || 0;\n    this.category = data.category || 'decor';\n    this.image_url = data.image_url || '';\n    this.gallery_images = data.gallery_images || [];\n    this.in_stock = data.in_stock !== undefined ? data.in_stock : true;\n    this.featured = data.featured !== undefined ? data.featured : false;\n    this.created_date = data.created_date || new Date().toISOString();\n  }\n\n  /**\n   * Validate product data\n   * @returns {Object} Validation result with isValid and errors\n   */\n  validate() {\n    const errors = [];\n    if (!this.name || this.name.trim().length === 0) {\n      errors.push('Product name is required');\n    }\n    if (!this.price || this.price <= 0) {\n      errors.push('Product price must be greater than 0');\n    }\n    const validCategories = ['living_room', 'bedroom', 'kitchen', 'bathroom', 'office', 'outdoor', 'lighting', 'decor'];\n    if (!this.category || !validCategories.includes(this.category)) {\n      errors.push('Valid category is required');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Convert to plain object\n   * @returns {Object} Plain object representation\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      description: this.description,\n      price: this.price,\n      category: this.category,\n      image_url: this.image_url,\n      gallery_images: this.gallery_images,\n      in_stock: this.in_stock,\n      featured: this.featured,\n      created_date: this.created_date\n    };\n  }\n\n  /**\n   * Get formatted price with currency\n   * @returns {string} Formatted price\n   */\n  getFormattedPrice() {\n    return `${this.price} DA`;\n  }\n\n  /**\n   * Get category display name\n   * @returns {string} Human-readable category name\n   */\n  getCategoryDisplayName() {\n    return this.category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  /**\n   * Check if product has gallery images\n   * @returns {boolean} True if gallery images exist\n   */\n  hasGalleryImages() {\n    return this.gallery_images && this.gallery_images.length > 0;\n  }\n\n  // Static methods for data operations (Supabase implementation)\n\n  /**\n   * Get all products with optional sorting\n   * @param {string} sortBy - Sort field (e.g., 'name', '-price', 'created_date')\n   * @returns {Promise<Product[]>} Array of products\n   */\n  static async list(sortBy = '-created_date') {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        return this.getMockData(sortBy);\n      }\n      let query = supabase.from(PRODUCTS_TABLE).select('*');\n\n      // Handle sorting\n      const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n      const ascending = !sortBy.startsWith('-');\n      query = query.order(sortField, {\n        ascending\n      });\n      const {\n        data,\n        error\n      } = await query;\n      if (error) {\n        console.error('Error fetching products:', error);\n        return this.getMockData(sortBy);\n      }\n      return data.map(item => new Product(item));\n    } catch (error) {\n      console.error('Error in Product.list:', error);\n      return this.getMockData(sortBy);\n    }\n  }\n  static getMockData(sortBy = '-created_date') {\n    const mockProducts = [new Product({\n      id: '1',\n      name: 'Modern Sofa Set',\n      description: 'Comfortable 3-seater sofa with premium fabric upholstery',\n      price: 45000,\n      category: 'living_room',\n      image_url: 'https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=800',\n      in_stock: true,\n      featured: true,\n      dimensions: '200cm x 90cm x 85cm',\n      materials: 'Premium fabric, hardwood frame',\n      colors_available: ['Gray', 'Navy Blue', 'Beige']\n    }), new Product({\n      id: '2',\n      name: 'Oak Dining Table',\n      description: 'Solid oak dining table for 6 people',\n      price: 35000,\n      category: 'kitchen',\n      image_url: 'https://images.unsplash.com/photo-1449247709967-d4461a6a6103?w=800',\n      in_stock: true,\n      featured: true,\n      dimensions: '180cm x 90cm x 75cm',\n      materials: 'Solid oak wood',\n      colors_available: ['Natural Oak', 'Dark Walnut']\n    }), new Product({\n      id: '3',\n      name: 'Bedside Lamp',\n      description: 'Modern ceramic bedside lamp with warm lighting',\n      price: 8500,\n      category: 'lighting',\n      image_url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800',\n      in_stock: true,\n      featured: false,\n      dimensions: '25cm x 25cm x 45cm',\n      materials: 'Ceramic base, fabric shade',\n      colors_available: ['White', 'Black', 'Blue']\n    }), new Product({\n      id: '4',\n      name: 'Leather Armchair',\n      description: 'Premium leather armchair with ergonomic design',\n      price: 28000,\n      category: 'living_room',\n      image_url: 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800',\n      in_stock: true,\n      featured: true,\n      dimensions: '80cm x 85cm x 95cm',\n      materials: 'Genuine leather, steel frame',\n      colors_available: ['Brown', 'Black', 'Cognac']\n    }), new Product({\n      id: '5',\n      name: 'Kitchen Island',\n      description: 'Multi-functional kitchen island with storage',\n      price: 55000,\n      category: 'kitchen',\n      image_url: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800',\n      in_stock: true,\n      featured: false,\n      dimensions: '120cm x 60cm x 90cm',\n      materials: 'Solid wood, granite top',\n      colors_available: ['Natural Wood', 'White']\n    }), new Product({\n      id: '6',\n      name: 'Garden Bench',\n      description: 'Weather-resistant outdoor bench',\n      price: 15000,\n      category: 'outdoor',\n      image_url: 'https://images.unsplash.com/photo-1506439773649-6e0eb8cfb237?w=800',\n      in_stock: true,\n      featured: true,\n      dimensions: '150cm x 45cm x 80cm',\n      materials: 'Teak wood, stainless steel',\n      colors_available: ['Natural Teak', 'Gray Wash']\n    })];\n\n    // Simple sorting implementation\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n    const sortOrder = sortBy.startsWith('-') ? -1 : 1;\n    return mockProducts.sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      if (typeof aVal === 'string') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      if (aVal < bVal) return -1 * sortOrder;\n      if (aVal > bVal) return 1 * sortOrder;\n      return 0;\n    });\n  }\n\n  /**\n   * Get products with filters\n   * @param {Object} filters - Filter criteria\n   * @param {string} sortBy - Sort field\n   * @param {number} limit - Maximum number of results\n   * @returns {Promise<Product[]>} Filtered products\n   */\n  static async filter(filters = {}, sortBy = '-created_date', limit = null) {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        const allProducts = this.getMockData(sortBy);\n        let filtered = allProducts.filter(product => {\n          for (const [key, value] of Object.entries(filters)) {\n            if (product[key] !== value) {\n              return false;\n            }\n          }\n          return true;\n        });\n        if (limit) {\n          filtered = filtered.slice(0, limit);\n        }\n        return filtered;\n      }\n      let query = supabase.from(PRODUCTS_TABLE).select('*');\n\n      // Apply filters\n      for (const [key, value] of Object.entries(filters)) {\n        query = query.eq(key, value);\n      }\n\n      // Handle sorting\n      const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n      const ascending = !sortBy.startsWith('-');\n      query = query.order(sortField, {\n        ascending\n      });\n\n      // Apply limit\n      if (limit) {\n        query = query.limit(limit);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) {\n        console.error('Error filtering products:', error);\n        // Fallback to mock data\n        const allProducts = this.getMockData(sortBy);\n        let filtered = allProducts.filter(product => {\n          for (const [key, value] of Object.entries(filters)) {\n            if (product[key] !== value) {\n              return false;\n            }\n          }\n          return true;\n        });\n        if (limit) {\n          filtered = filtered.slice(0, limit);\n        }\n        return filtered;\n      }\n      return data.map(item => new Product(item));\n    } catch (error) {\n      console.error('Error in Product.filter:', error);\n      // Fallback to mock data\n      const allProducts = this.getMockData(sortBy);\n      let filtered = allProducts.filter(product => {\n        for (const [key, value] of Object.entries(filters)) {\n          if (product[key] !== value) {\n            return false;\n          }\n        }\n        return true;\n      });\n      if (limit) {\n        filtered = filtered.slice(0, limit);\n      }\n      return filtered;\n    }\n  }\n\n  /**\n   * Get single product by ID\n   * @param {string} id - Product ID\n   * @returns {Promise<Product|null>} Product or null if not found\n   */\n  static async get(id) {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        const allProducts = this.getMockData();\n        return allProducts.find(product => product.id === id) || null;\n      }\n      const {\n        data,\n        error\n      } = await supabase.from(PRODUCTS_TABLE).select('*').eq('id', id).single();\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No rows returned\n          return null;\n        }\n        console.error('Error fetching product:', error);\n        // Fallback to mock data\n        const allProducts = this.getMockData();\n        return allProducts.find(product => product.id === id) || null;\n      }\n      return new Product(data);\n    } catch (error) {\n      console.error('Error in Product.get:', error);\n      // Fallback to mock data\n      const allProducts = this.getMockData();\n      return allProducts.find(product => product.id === id) || null;\n    }\n  }\n\n  /**\n   * Create new product\n   * @param {Object} data - Product data\n   * @returns {Promise<Product>} Created product\n   */\n  static async create(data) {\n    const product = new Product({\n      ...data,\n      created_date: new Date().toISOString()\n    });\n    const validation = product.validate();\n    if (!validation.isValid) {\n      throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n    }\n    try {\n      const {\n        data: insertedData,\n        error\n      } = await supabase.from(PRODUCTS_TABLE).insert([product.toJSON()]).select().single();\n      if (error) {\n        console.error('Error creating product:', error);\n        throw new Error(`Failed to create product: ${error.message}`);\n      }\n      return new Product(insertedData);\n    } catch (error) {\n      console.error('Error in Product.create:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update existing product\n   * @param {string} id - Product ID\n   * @param {Object} data - Updated data\n   * @returns {Promise<Product|null>} Updated product or null if not found\n   */\n  static async update(id, data) {\n    try {\n      // First check if product exists\n      const existingProduct = await this.get(id);\n      if (!existingProduct) {\n        return null;\n      }\n\n      // Update properties\n      Object.assign(existingProduct, data);\n      const validation = existingProduct.validate();\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n      const {\n        data: updatedData,\n        error\n      } = await supabase.from(PRODUCTS_TABLE).update(existingProduct.toJSON()).eq('id', id).select().single();\n      if (error) {\n        console.error('Error updating product:', error);\n        throw new Error(`Failed to update product: ${error.message}`);\n      }\n      return new Product(updatedData);\n    } catch (error) {\n      console.error('Error in Product.update:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete product\n   * @param {string} id - Product ID\n   * @returns {Promise<boolean>} True if deleted successfully\n   */\n  static async delete(id) {\n    try {\n      const {\n        error\n      } = await supabase.from(PRODUCTS_TABLE).delete().eq('id', id);\n      if (error) {\n        console.error('Error deleting product:', error);\n        throw new Error(`Failed to delete product: ${error.message}`);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error in Product.delete:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","PRODUCTS_TABLE","Product","constructor","data","id","name","description","price","category","image_url","gallery_images","in_stock","undefined","featured","created_date","Date","toISOString","validate","errors","trim","length","push","validCategories","includes","isValid","toJSON","getFormattedPrice","getCategoryDisplayName","replace","l","toUpperCase","hasGalleryImages","list","sortBy","process","env","REACT_APP_SUPABASE_URL","getMockData","query","from","select","sortField","startsWith","slice","ascending","order","error","console","map","item","mockProducts","dimensions","materials","colors_available","sortOrder","sort","a","b","aVal","bVal","toLowerCase","filter","filters","limit","allProducts","filtered","product","key","value","Object","entries","eq","get","find","single","code","create","validation","Error","join","insertedData","insert","message","update","existingProduct","assign","updatedData","delete"],"sources":["C:/Users/hakimm/Desktop/beta/src/entities/Product.js"],"sourcesContent":["import { supabase, PRODUCTS_TABLE } from '../lib/supabase';\n\n/**\n * Product Entity\n * Represents furniture and decor products in the e-commerce system\n */\nexport class Product {\n  constructor(data = {}) {\n    this.id = data.id || null;\n    this.name = data.name || '';\n    this.description = data.description || '';\n    this.price = data.price || 0;\n    this.category = data.category || 'decor';\n    this.image_url = data.image_url || '';\n    this.gallery_images = data.gallery_images || [];\n    this.in_stock = data.in_stock !== undefined ? data.in_stock : true;\n    this.featured = data.featured !== undefined ? data.featured : false;\n    this.created_date = data.created_date || new Date().toISOString();\n  }\n\n  /**\n   * Validate product data\n   * @returns {Object} Validation result with isValid and errors\n   */\n  validate() {\n    const errors = [];\n    \n    if (!this.name || this.name.trim().length === 0) {\n      errors.push('Product name is required');\n    }\n    \n    if (!this.price || this.price <= 0) {\n      errors.push('Product price must be greater than 0');\n    }\n    \n    const validCategories = [\n      'living_room', 'bedroom', 'kitchen', 'bathroom', \n      'office', 'outdoor', 'lighting', 'decor'\n    ];\n    \n    if (!this.category || !validCategories.includes(this.category)) {\n      errors.push('Valid category is required');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Convert to plain object\n   * @returns {Object} Plain object representation\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      description: this.description,\n      price: this.price,\n      category: this.category,\n      image_url: this.image_url,\n      gallery_images: this.gallery_images,\n      in_stock: this.in_stock,\n      featured: this.featured,\n      created_date: this.created_date\n    };\n  }\n\n  /**\n   * Get formatted price with currency\n   * @returns {string} Formatted price\n   */\n  getFormattedPrice() {\n    return `${this.price} DA`;\n  }\n\n  /**\n   * Get category display name\n   * @returns {string} Human-readable category name\n   */\n  getCategoryDisplayName() {\n    return this.category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  /**\n   * Check if product has gallery images\n   * @returns {boolean} True if gallery images exist\n   */\n  hasGalleryImages() {\n    return this.gallery_images && this.gallery_images.length > 0;\n  }\n\n\n  // Static methods for data operations (Supabase implementation)\n  \n  /**\n   * Get all products with optional sorting\n   * @param {string} sortBy - Sort field (e.g., 'name', '-price', 'created_date')\n   * @returns {Promise<Product[]>} Array of products\n   */\n  static async list(sortBy = '-created_date') {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        return this.getMockData(sortBy);\n      }\n\n      let query = supabase.from(PRODUCTS_TABLE).select('*');\n      \n      // Handle sorting\n      const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n      const ascending = !sortBy.startsWith('-');\n      \n      query = query.order(sortField, { ascending });\n      \n      const { data, error } = await query;\n      \n      if (error) {\n        console.error('Error fetching products:', error);\n        return this.getMockData(sortBy);\n      }\n      \n      return data.map(item => new Product(item));\n    } catch (error) {\n      console.error('Error in Product.list:', error);\n      return this.getMockData(sortBy);\n    }\n  }\n\n  static getMockData(sortBy = '-created_date') {\n    const mockProducts = [\n      new Product({\n        id: '1',\n        name: 'Modern Sofa Set',\n        description: 'Comfortable 3-seater sofa with premium fabric upholstery',\n        price: 45000,\n        category: 'living_room',\n        image_url: 'https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=800',\n        in_stock: true,\n        featured: true,\n        dimensions: '200cm x 90cm x 85cm',\n        materials: 'Premium fabric, hardwood frame',\n        colors_available: ['Gray', 'Navy Blue', 'Beige']\n      }),\n      new Product({\n        id: '2',\n        name: 'Oak Dining Table',\n        description: 'Solid oak dining table for 6 people',\n        price: 35000,\n        category: 'kitchen',\n        image_url: 'https://images.unsplash.com/photo-1449247709967-d4461a6a6103?w=800',\n        in_stock: true,\n        featured: true,\n        dimensions: '180cm x 90cm x 75cm',\n        materials: 'Solid oak wood',\n        colors_available: ['Natural Oak', 'Dark Walnut']\n      }),\n      new Product({\n        id: '3',\n        name: 'Bedside Lamp',\n        description: 'Modern ceramic bedside lamp with warm lighting',\n        price: 8500,\n        category: 'lighting',\n        image_url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800',\n        in_stock: true,\n        featured: false,\n        dimensions: '25cm x 25cm x 45cm',\n        materials: 'Ceramic base, fabric shade',\n        colors_available: ['White', 'Black', 'Blue']\n      }),\n      new Product({\n        id: '4',\n        name: 'Leather Armchair',\n        description: 'Premium leather armchair with ergonomic design',\n        price: 28000,\n        category: 'living_room',\n        image_url: 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800',\n        in_stock: true,\n        featured: true,\n        dimensions: '80cm x 85cm x 95cm',\n        materials: 'Genuine leather, steel frame',\n        colors_available: ['Brown', 'Black', 'Cognac']\n      }),\n      new Product({\n        id: '5',\n        name: 'Kitchen Island',\n        description: 'Multi-functional kitchen island with storage',\n        price: 55000,\n        category: 'kitchen',\n        image_url: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800',\n        in_stock: true,\n        featured: false,\n        dimensions: '120cm x 60cm x 90cm',\n        materials: 'Solid wood, granite top',\n        colors_available: ['Natural Wood', 'White']\n      }),\n      new Product({\n        id: '6',\n        name: 'Garden Bench',\n        description: 'Weather-resistant outdoor bench',\n        price: 15000,\n        category: 'outdoor',\n        image_url: 'https://images.unsplash.com/photo-1506439773649-6e0eb8cfb237?w=800',\n        in_stock: true,\n        featured: true,\n        dimensions: '150cm x 45cm x 80cm',\n        materials: 'Teak wood, stainless steel',\n        colors_available: ['Natural Teak', 'Gray Wash']\n      })\n    ];\n\n    // Simple sorting implementation\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n    const sortOrder = sortBy.startsWith('-') ? -1 : 1;\n    \n    return mockProducts.sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      if (typeof aVal === 'string') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return -1 * sortOrder;\n      if (aVal > bVal) return 1 * sortOrder;\n      return 0;\n    });\n  }\n\n  /**\n   * Get products with filters\n   * @param {Object} filters - Filter criteria\n   * @param {string} sortBy - Sort field\n   * @param {number} limit - Maximum number of results\n   * @returns {Promise<Product[]>} Filtered products\n   */\n  static async filter(filters = {}, sortBy = '-created_date', limit = null) {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        const allProducts = this.getMockData(sortBy);\n        \n        let filtered = allProducts.filter(product => {\n          for (const [key, value] of Object.entries(filters)) {\n            if (product[key] !== value) {\n              return false;\n            }\n          }\n          return true;\n        });\n        \n        if (limit) {\n          filtered = filtered.slice(0, limit);\n        }\n        \n        return filtered;\n      }\n\n      let query = supabase.from(PRODUCTS_TABLE).select('*');\n      \n      // Apply filters\n      for (const [key, value] of Object.entries(filters)) {\n        query = query.eq(key, value);\n      }\n      \n      // Handle sorting\n      const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n      const ascending = !sortBy.startsWith('-');\n      query = query.order(sortField, { ascending });\n      \n      // Apply limit\n      if (limit) {\n        query = query.limit(limit);\n      }\n      \n      const { data, error } = await query;\n      \n      if (error) {\n        console.error('Error filtering products:', error);\n        // Fallback to mock data\n        const allProducts = this.getMockData(sortBy);\n        let filtered = allProducts.filter(product => {\n          for (const [key, value] of Object.entries(filters)) {\n            if (product[key] !== value) {\n              return false;\n            }\n          }\n          return true;\n        });\n        \n        if (limit) {\n          filtered = filtered.slice(0, limit);\n        }\n        \n        return filtered;\n      }\n      \n      return data.map(item => new Product(item));\n    } catch (error) {\n      console.error('Error in Product.filter:', error);\n      // Fallback to mock data\n      const allProducts = this.getMockData(sortBy);\n      let filtered = allProducts.filter(product => {\n        for (const [key, value] of Object.entries(filters)) {\n          if (product[key] !== value) {\n            return false;\n          }\n        }\n        return true;\n      });\n      \n      if (limit) {\n        filtered = filtered.slice(0, limit);\n      }\n      \n      return filtered;\n    }\n  }\n\n  /**\n   * Get single product by ID\n   * @param {string} id - Product ID\n   * @returns {Promise<Product|null>} Product or null if not found\n   */\n  static async get(id) {\n    try {\n      // Fallback to mock data if Supabase is not configured\n      if (!supabase || process.env.REACT_APP_SUPABASE_URL === 'YOUR_SUPABASE_URL') {\n        const allProducts = this.getMockData();\n        return allProducts.find(product => product.id === id) || null;\n      }\n\n      const { data, error } = await supabase\n        .from(PRODUCTS_TABLE)\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No rows returned\n          return null;\n        }\n        console.error('Error fetching product:', error);\n        // Fallback to mock data\n        const allProducts = this.getMockData();\n        return allProducts.find(product => product.id === id) || null;\n      }\n      \n      return new Product(data);\n    } catch (error) {\n      console.error('Error in Product.get:', error);\n      // Fallback to mock data\n      const allProducts = this.getMockData();\n      return allProducts.find(product => product.id === id) || null;\n    }\n  }\n\n  /**\n   * Create new product\n   * @param {Object} data - Product data\n   * @returns {Promise<Product>} Created product\n   */\n  static async create(data) {\n    const product = new Product({\n      ...data,\n      created_date: new Date().toISOString()\n    });\n    \n    const validation = product.validate();\n    if (!validation.isValid) {\n      throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n    }\n    \n    try {\n      const { data: insertedData, error } = await supabase\n        .from(PRODUCTS_TABLE)\n        .insert([product.toJSON()])\n        .select()\n        .single();\n      \n      if (error) {\n        console.error('Error creating product:', error);\n        throw new Error(`Failed to create product: ${error.message}`);\n      }\n      \n      return new Product(insertedData);\n    } catch (error) {\n      console.error('Error in Product.create:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update existing product\n   * @param {string} id - Product ID\n   * @param {Object} data - Updated data\n   * @returns {Promise<Product|null>} Updated product or null if not found\n   */\n  static async update(id, data) {\n    try {\n      // First check if product exists\n      const existingProduct = await this.get(id);\n      if (!existingProduct) {\n        return null;\n      }\n      \n      // Update properties\n      Object.assign(existingProduct, data);\n      \n      const validation = existingProduct.validate();\n      if (!validation.isValid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`);\n      }\n      \n      const { data: updatedData, error } = await supabase\n        .from(PRODUCTS_TABLE)\n        .update(existingProduct.toJSON())\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) {\n        console.error('Error updating product:', error);\n        throw new Error(`Failed to update product: ${error.message}`);\n      }\n      \n      return new Product(updatedData);\n    } catch (error) {\n      console.error('Error in Product.update:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete product\n   * @param {string} id - Product ID\n   * @returns {Promise<boolean>} True if deleted successfully\n   */\n  static async delete(id) {\n    try {\n      const { error } = await supabase\n        .from(PRODUCTS_TABLE)\n        .delete()\n        .eq('id', id);\n      \n      if (error) {\n        console.error('Error deleting product:', error);\n        throw new Error(`Failed to delete product: ${error.message}`);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error in Product.delete:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}