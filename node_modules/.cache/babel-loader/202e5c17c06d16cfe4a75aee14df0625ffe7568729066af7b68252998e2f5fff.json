{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Storage bucket name\nconst STORAGE_BUCKET = 'product-images';\n\n/**\n * Upload an image file to Supabase Storage\n * @param {File} file - The image file to upload\n * @param {string} folder - Optional folder path (e.g., 'products', 'gallery')\n * @returns {Promise<{success: boolean, url?: string, error?: string}>}\n */\nexport const uploadImage = async (file, folder = 'products') => {\n  try {\n    if (!file) {\n      return {\n        success: false,\n        error: 'No file provided'\n      };\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      return {\n        success: false,\n        error: 'File must be an image'\n      };\n    }\n\n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      return {\n        success: false,\n        error: 'File size must be less than 5MB'\n      };\n    }\n\n    // Generate unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${folder}/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n    // Upload file to Supabase Storage\n    const {\n      data,\n      error\n    } = await supabase.storage.from(STORAGE_BUCKET).upload(fileName, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n    if (error) {\n      console.error('Upload error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n\n    // Get public URL\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from(STORAGE_BUCKET).getPublicUrl(fileName);\n    return {\n      success: true,\n      url: publicUrl\n    };\n  } catch (error) {\n    console.error('Upload error:', error);\n    return {\n      success: false,\n      error: 'Failed to upload image'\n    };\n  }\n};\n\n/**\n * Delete an image from Supabase Storage\n * @param {string} url - The public URL of the image to delete\n * @returns {Promise<{success: boolean, error?: string}>}\n */\nexport const deleteImage = async url => {\n  try {\n    if (!url) {\n      return {\n        success: false,\n        error: 'No URL provided'\n      };\n    }\n\n    // Extract file path from URL\n    const urlParts = url.split('/');\n    const bucketIndex = urlParts.findIndex(part => part === STORAGE_BUCKET);\n    if (bucketIndex === -1) {\n      return {\n        success: false,\n        error: 'Invalid image URL'\n      };\n    }\n    const filePath = urlParts.slice(bucketIndex + 1).join('/');\n\n    // Delete file from Supabase Storage\n    const {\n      error\n    } = await supabase.storage.from(STORAGE_BUCKET).remove([filePath]);\n    if (error) {\n      console.error('Delete error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Delete error:', error);\n    return {\n      success: false,\n      error: 'Failed to delete image'\n    };\n  }\n};\n\n/**\n * Upload multiple images\n * @param {File[]} files - Array of image files to upload\n * @param {string} folder - Optional folder path\n * @returns {Promise<{success: boolean, urls?: string[], errors?: string[]}>}\n */\nexport const uploadMultipleImages = async (files, folder = 'gallery') => {\n  try {\n    const uploadPromises = files.map(file => uploadImage(file, folder));\n    const results = await Promise.all(uploadPromises);\n    const successfulUploads = results.filter(result => result.success);\n    const failedUploads = results.filter(result => !result.success);\n    const urls = successfulUploads.map(result => result.url);\n    const errors = failedUploads.map(result => result.error);\n    return {\n      success: successfulUploads.length > 0,\n      urls,\n      errors: errors.length > 0 ? errors : undefined\n    };\n  } catch (error) {\n    console.error('Multiple upload error:', error);\n    return {\n      success: false,\n      errors: ['Failed to upload images']\n    };\n  }\n};\n\n/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {{valid: boolean, error?: string}}\n */\nexport const validateImageFile = file => {\n  if (!file) {\n    return {\n      valid: false,\n      error: 'No file provided'\n    };\n  }\n  if (!file.type.startsWith('image/')) {\n    return {\n      valid: false,\n      error: 'File must be an image'\n    };\n  }\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: 'File size must be less than 5MB'\n    };\n  }\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: 'Only JPEG, PNG, and WebP images are allowed'\n    };\n  }\n  return {\n    valid: true\n  };\n};","map":{"version":3,"names":["supabase","STORAGE_BUCKET","uploadImage","file","folder","success","error","type","startsWith","maxSize","size","fileExt","name","split","pop","fileName","Date","now","Math","random","toString","substring","data","storage","from","upload","cacheControl","upsert","console","message","publicUrl","getPublicUrl","url","deleteImage","urlParts","bucketIndex","findIndex","part","filePath","slice","join","remove","uploadMultipleImages","files","uploadPromises","map","results","Promise","all","successfulUploads","filter","result","failedUploads","urls","errors","length","undefined","validateImageFile","valid","allowedTypes","includes"],"sources":["C:/Users/hakimm/Desktop/beta/src/utils/imageUpload.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Storage bucket name\nconst STORAGE_BUCKET = 'product-images';\n\n/**\n * Upload an image file to Supabase Storage\n * @param {File} file - The image file to upload\n * @param {string} folder - Optional folder path (e.g., 'products', 'gallery')\n * @returns {Promise<{success: boolean, url?: string, error?: string}>}\n */\nexport const uploadImage = async (file, folder = 'products') => {\n  try {\n    if (!file) {\n      return { success: false, error: 'No file provided' };\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      return { success: false, error: 'File must be an image' };\n    }\n\n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      return { success: false, error: 'File size must be less than 5MB' };\n    }\n\n    // Generate unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${folder}/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n    // Upload file to Supabase Storage\n    const { data, error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .upload(fileName, file, {\n        cacheControl: '3600',\n        upsert: false\n      });\n\n    if (error) {\n      console.error('Upload error:', error);\n      return { success: false, error: error.message };\n    }\n\n    // Get public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from(STORAGE_BUCKET)\n      .getPublicUrl(fileName);\n\n    return { success: true, url: publicUrl };\n  } catch (error) {\n    console.error('Upload error:', error);\n    return { success: false, error: 'Failed to upload image' };\n  }\n};\n\n/**\n * Delete an image from Supabase Storage\n * @param {string} url - The public URL of the image to delete\n * @returns {Promise<{success: boolean, error?: string}>}\n */\nexport const deleteImage = async (url) => {\n  try {\n    if (!url) {\n      return { success: false, error: 'No URL provided' };\n    }\n\n    // Extract file path from URL\n    const urlParts = url.split('/');\n    const bucketIndex = urlParts.findIndex(part => part === STORAGE_BUCKET);\n    \n    if (bucketIndex === -1) {\n      return { success: false, error: 'Invalid image URL' };\n    }\n\n    const filePath = urlParts.slice(bucketIndex + 1).join('/');\n\n    // Delete file from Supabase Storage\n    const { error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([filePath]);\n\n    if (error) {\n      console.error('Delete error:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Delete error:', error);\n    return { success: false, error: 'Failed to delete image' };\n  }\n};\n\n/**\n * Upload multiple images\n * @param {File[]} files - Array of image files to upload\n * @param {string} folder - Optional folder path\n * @returns {Promise<{success: boolean, urls?: string[], errors?: string[]}>}\n */\nexport const uploadMultipleImages = async (files, folder = 'gallery') => {\n  try {\n    const uploadPromises = files.map(file => uploadImage(file, folder));\n    const results = await Promise.all(uploadPromises);\n\n    const successfulUploads = results.filter(result => result.success);\n    const failedUploads = results.filter(result => !result.success);\n\n    const urls = successfulUploads.map(result => result.url);\n    const errors = failedUploads.map(result => result.error);\n\n    return {\n      success: successfulUploads.length > 0,\n      urls,\n      errors: errors.length > 0 ? errors : undefined\n    };\n  } catch (error) {\n    console.error('Multiple upload error:', error);\n    return { success: false, errors: ['Failed to upload images'] };\n  }\n};\n\n/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {{valid: boolean, error?: string}}\n */\nexport const validateImageFile = (file) => {\n  if (!file) {\n    return { valid: false, error: 'No file provided' };\n  }\n\n  if (!file.type.startsWith('image/')) {\n    return { valid: false, error: 'File must be an image' };\n  }\n\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  if (file.size > maxSize) {\n    return { valid: false, error: 'File size must be less than 5MB' };\n  }\n\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: 'Only JPEG, PNG, and WebP images are allowed' };\n  }\n\n  return { valid: true };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}