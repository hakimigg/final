{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../lib/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AdminContext=/*#__PURE__*/createContext();export const useAdmin=()=>{const context=useContext(AdminContext);if(!context){throw new Error('useAdmin must be used within an AdminProvider');}return context;};export const AdminProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[isLoading,setIsLoading]=useState(true);const[user,setUser]=useState(null);useEffect(()=>{const checkAuth=async()=>{try{if(!supabase){console.error('Supabase client not initialized');setIsLoading(false);return;}const{data:{session}}=await supabase.auth.getSession();if(session!==null&&session!==void 0&&session.user){setUser(session.user);setIsAuthenticated(true);}}catch(error){console.error('Auth check error:',error);}finally{setIsLoading(false);}};checkAuth();if(supabase){const{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{if(session!==null&&session!==void 0&&session.user){setUser(session.user);setIsAuthenticated(true);}else{setUser(null);setIsAuthenticated(false);}setIsLoading(false);});return()=>subscription.unsubscribe();}else{setIsLoading(false);}},[]);const login=async(email,password)=>{try{if(supabase){const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){console.error('Supabase auth error:',error);}else if(data.user){setUser(data.user);setIsAuthenticated(true);return{success:true};}}const ADMIN_EMAIL=process.env.REACT_APP_ADMIN_EMAIL||'example@gmail.com';const ADMIN_PASSWORD=process.env.REACT_APP_ADMIN_PASSWORD||'admin123';const SECURE_ADMIN_EMAIL=process.env.REACT_APP_SECURE_ADMIN_EMAIL||'admin@beta-secure-2024';const SECURE_ADMIN_PASSWORD=process.env.REACT_APP_SECURE_ADMIN_PASSWORD||'BetaAdmin#2024!Secure';if(email===ADMIN_EMAIL&&password===ADMIN_PASSWORD||email===SECURE_ADMIN_EMAIL&&password===SECURE_ADMIN_PASSWORD){const mockUser={id:'admin-user-id',email:ADMIN_EMAIL,role:'admin'};setUser(mockUser);setIsAuthenticated(true);return{success:true};}else{return{success:false,error:'Invalid admin credentials'};}}catch(error){console.error('Login error:',error);return{success:false,error:error.message};}};const logout=async()=>{try{if(supabase){await supabase.auth.signOut();}setUser(null);setIsAuthenticated(false);}catch(error){console.error('Logout error:',error);}};const signup=async(email,password)=>{return{success:false,error:'Account creation is disabled'};};const value={isAuthenticated,isLoading,user,login,logout,signup};return/*#__PURE__*/_jsx(AdminContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AdminContext","useAdmin","context","Error","AdminProvider","_ref","children","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","checkAuth","console","error","data","session","auth","getSession","subscription","onAuthStateChange","event","unsubscribe","login","email","password","signInWithPassword","success","ADMIN_EMAIL","process","env","REACT_APP_ADMIN_EMAIL","ADMIN_PASSWORD","REACT_APP_ADMIN_PASSWORD","SECURE_ADMIN_EMAIL","REACT_APP_SECURE_ADMIN_EMAIL","SECURE_ADMIN_PASSWORD","REACT_APP_SECURE_ADMIN_PASSWORD","mockUser","id","role","message","logout","signOut","signup","value","Provider"],"sources":["C:/Users/hakimm/Downloads/final/src/contexts/AdminContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\n\r\nconst AdminContext = createContext();\r\n\r\nexport const useAdmin = () => {\r\n  const context = useContext(AdminContext);\r\n  if (!context) {\r\n    throw new Error('useAdmin must be used within an AdminProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AdminProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    \r\n    const checkAuth = async () => {\r\n      try {\r\n        if (!supabase) {\r\n          console.error('Supabase client not initialized');\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        if (session?.user) {\r\n          setUser(session.user);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check error:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n\r\n    \r\n    if (supabase) {\r\n      const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n        async (event, session) => {\r\n          if (session?.user) {\r\n            setUser(session.user);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n          }\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      \r\n      if (supabase) {\r\n        const { data, error } = await supabase.auth.signInWithPassword({\r\n          email,\r\n          password,\r\n        });\r\n\r\n        if (error) {\r\n          console.error('Supabase auth error:', error);\r\n          \r\n        } else if (data.user) {\r\n          setUser(data.user);\r\n          setIsAuthenticated(true);\r\n          return { success: true };\r\n        }\r\n      }\r\n\r\n      \r\n      const ADMIN_EMAIL = process.env.REACT_APP_ADMIN_EMAIL || 'example@gmail.com';\r\n      const ADMIN_PASSWORD = process.env.REACT_APP_ADMIN_PASSWORD || 'admin123';\r\n      const SECURE_ADMIN_EMAIL = process.env.REACT_APP_SECURE_ADMIN_EMAIL || 'admin@beta-secure-2024';\r\n      const SECURE_ADMIN_PASSWORD = process.env.REACT_APP_SECURE_ADMIN_PASSWORD || 'BetaAdmin#2024!Secure';\r\n\r\n      if ((email === ADMIN_EMAIL && password === ADMIN_PASSWORD) || \r\n          (email === SECURE_ADMIN_EMAIL && password === SECURE_ADMIN_PASSWORD)) {\r\n        \r\n        const mockUser = {\r\n          id: 'admin-user-id',\r\n          email: ADMIN_EMAIL,\r\n          role: 'admin'\r\n        };\r\n        \r\n        setUser(mockUser);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, error: 'Invalid admin credentials' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      if (supabase) {\r\n        await supabase.auth.signOut();\r\n      }\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  };\r\n\r\n  const signup = async (email, password) => {\r\n    \r\n    return { success: false, error: 'Account creation is disabled' };\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    isLoading,\r\n    user,\r\n    login,\r\n    logout,\r\n    signup,\r\n  };\r\n\r\n  return (\r\n    <AdminContext.Provider value={value}>\r\n      {children}\r\n    </AdminContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}