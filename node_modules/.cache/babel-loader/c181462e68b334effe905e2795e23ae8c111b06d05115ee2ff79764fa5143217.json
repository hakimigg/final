{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, put, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nimport BlobDownloadBuilder from './BlobDownloadBuilder';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.shouldThrowOnError = false;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Enable throwing errors instead of returning them.\r\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        const metadata = options.metadata;\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n        } else {\n          body = fileBody;\n          headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n          headers['content-type'] = options.contentType;\n          if (metadata) {\n            headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n          }\n        }\n        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const data = yield (method == 'PUT' ? put : post)(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), body, Object.assign({\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        return {\n          data: {\n            path: cleanPath,\n            id: data.Id,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Upload a file with a token generated from `createSignedUploadUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createSignedUploadUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n      const _path = this._getFinalPath(cleanPath);\n      const url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n      url.searchParams.set('token', token);\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n          headers['content-type'] = options.contentType;\n        }\n        const data = yield put(this.fetch, url.toString(), body, {\n          headers\n        });\n        return {\n          data: {\n            path: cleanPath,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n   * They are valid for 2 hours.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\r\n   */\n  createSignedUploadUrl(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        const headers = Object.assign({}, this.headers);\n        if (options === null || options === void 0 ? void 0 : options.upsert) {\n          headers['x-upsert'] = 'true';\n        }\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n          headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   * @param options The destination options.\r\n   */\n  move(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   * @param options The destination options.\r\n   */\n  copy(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n        const signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(\"\".concat(this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  download(path, options) {\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    const queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n    const _path = this._getFinalPath(path);\n    const downloadFn = () => get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n      headers: this.headers,\n      noResolveJson: true\n    });\n    return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError);\n  }\n  /**\r\n   * Retrieves the details of an existing file.\r\n   * @param path\r\n   */\n  info(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        const data = yield get(this.fetch, \"\".concat(this.url, \"/object/info/\").concat(_path), {\n          headers: this.headers\n        });\n        return {\n          data: recursiveToCamel(data),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Checks the existence of a file.\r\n   * @param path\r\n   */\n  exists(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        yield head(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), {\n          headers: this.headers\n        });\n        return {\n          data: true,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error) && error instanceof StorageUnknownError) {\n          const originalError = error.originalError;\n          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n            return {\n              data: false,\n              error\n            };\n          }\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n    let queryString = _queryString.join('&');\n    if (queryString !== '') {\n      queryString = \"?\".concat(queryString);\n    }\n    return {\n      data: {\n        publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n      }\n    };\n  }\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\r\n   * Lists all the files and folders within a path of the bucket.\r\n   * @param path The folder path.\r\n   * @param options Search options including limit (defaults to 100), offset, sortBy, and search\r\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @experimental this method signature might change in the future\r\n   * @param options search options\r\n   * @param parameters\r\n   */\n  listV2(options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign({}, options);\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/list-v2/\").concat(this.bucketId), body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  encodeMetadata(metadata) {\n    return JSON.stringify(metadata);\n  }\n  toBase64(data) {\n    if (typeof Buffer !== 'undefined') {\n      return Buffer.from(data).toString('base64');\n    }\n    return btoa(data);\n  }\n  _getFinalPath(path) {\n    return \"\".concat(this.bucketId, \"/\").concat(path.replace(/^\\/+/, ''));\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n  transformOptsToQueryString(transform) {\n    const params = [];\n    if (transform.width) {\n      params.push(\"width=\".concat(transform.width));\n    }\n    if (transform.height) {\n      params.push(\"height=\".concat(transform.height));\n    }\n    if (transform.resize) {\n      params.push(\"resize=\".concat(transform.resize));\n    }\n    if (transform.format) {\n      params.push(\"format=\".concat(transform.format));\n    }\n    if (transform.quality) {\n      params.push(\"quality=\".concat(transform.quality));\n    }\n    return params.join('&');\n  }\n}","map":{"version":3,"names":["isStorageError","StorageError","StorageUnknownError","get","head","post","put","remove","recursiveToCamel","resolveFetch","BlobDownloadBuilder","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","arguments","length","undefined","bucketId","fetch","shouldThrowOnError","throwOnError","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","metadata","Blob","FormData","append","encodeMetadata","concat","toBase64","cleanPath","_removeEmptyFolders","_path","_getFinalPath","data","duplex","id","Id","fullPath","Key","error","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","destinationBucket","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","downloadFn","noResolveJson","info","exists","originalError","includes","status","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","listV2","JSON","stringify","Buffer","from","btoa","replace","params","width","height","resize","format","quality"],"sources":["C:\\Users\\hakimm\\Desktop\\beta\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError, StorageUnknownError } from '../lib/errors'\r\nimport { Fetch, get, head, post, put, remove } from '../lib/fetch'\r\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers'\r\nimport {\r\n  FileObject,\r\n  FileOptions,\r\n  SearchOptions,\r\n  FetchParameters,\r\n  TransformOptions,\r\n  DestinationOptions,\r\n  FileObjectV2,\r\n  Camelize,\r\n  SearchV2Options,\r\n  SearchV2Result,\r\n} from '../lib/types'\r\nimport BlobDownloadBuilder from './BlobDownloadBuilder'\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n  limit: 100,\r\n  offset: 0,\r\n  sortBy: {\r\n    column: 'name',\r\n    order: 'asc',\r\n  },\r\n}\r\n\r\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\r\n  cacheControl: '3600',\r\n  contentType: 'text/plain;charset=UTF-8',\r\n  upsert: false,\r\n}\r\n\r\ntype FileBody =\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | Blob\r\n  | Buffer\r\n  | File\r\n  | FormData\r\n  | NodeJS.ReadableStream\r\n  | ReadableStream<Uint8Array>\r\n  | URLSearchParams\r\n  | string\r\n\r\nexport default class StorageFileApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected bucketId?: string\r\n  protected fetch: Fetch\r\n  protected shouldThrowOnError = false\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    bucketId?: string,\r\n    fetch?: Fetch\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.bucketId = bucketId\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Enable throwing errors instead of returning them.\r\n   */\r\n  public throwOnError(): this {\r\n    this.shouldThrowOnError = true\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  private async uploadOrUpdate(\r\n    method: 'POST' | 'PUT',\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { id: string; path: string; fullPath: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let body\r\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\r\n      let headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\r\n      }\r\n\r\n      const metadata = options.metadata\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        if (metadata) {\r\n          body.append('metadata', this.encodeMetadata(metadata))\r\n        }\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        if (metadata) {\r\n          body.append('metadata', this.encodeMetadata(metadata))\r\n        }\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n\r\n        if (metadata) {\r\n          headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata))\r\n        }\r\n      }\r\n\r\n      if (fileOptions?.headers) {\r\n        headers = { ...headers, ...fileOptions.headers }\r\n      }\r\n\r\n      const cleanPath = this._removeEmptyFolders(path)\r\n      const _path = this._getFinalPath(cleanPath)\r\n      const data = await (method == 'PUT' ? put : post)(\r\n        this.fetch,\r\n        `${this.url}/object/${_path}`,\r\n        body as object,\r\n        { headers, ...(options?.duplex ? { duplex: options.duplex } : {}) }\r\n      )\r\n\r\n      return {\r\n        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async upload(\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { id: string; path: string; fullPath: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Upload a file with a token generated from `createSignedUploadUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createSignedUploadUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async uploadToSignedUrl(\r\n    path: string,\r\n    token: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ) {\r\n    const cleanPath = this._removeEmptyFolders(path)\r\n    const _path = this._getFinalPath(cleanPath)\r\n\r\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\r\n    url.searchParams.set('token', token)\r\n\r\n    try {\r\n      let body\r\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...{ 'x-upsert': String(options.upsert as boolean) },\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const data = await put(this.fetch, url.toString(), body as object, { headers })\r\n\r\n      return {\r\n        data: { path: cleanPath, fullPath: data.Key },\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n   * They are valid for 2 hours.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\r\n   */\r\n  async createSignedUploadUrl(\r\n    path: string,\r\n    options?: { upsert: boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string; token: string; path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      const headers = { ...this.headers }\r\n\r\n      if (options?.upsert) {\r\n        headers['x-upsert'] = 'true'\r\n      }\r\n\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/upload/sign/${_path}`,\r\n        {},\r\n        { headers }\r\n      )\r\n\r\n      const url = new URL(this.url + data.url)\r\n\r\n      const token = url.searchParams.get('token')\r\n\r\n      if (!token) {\r\n        throw new StorageError('No token returned by API')\r\n      }\r\n\r\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async update(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { id: string; path: string; fullPath: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   * @param options The destination options.\r\n   */\r\n  async move(\r\n    fromPath: string,\r\n    toPath: string,\r\n    options?: DestinationOptions\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/move`,\r\n        {\r\n          bucketId: this.bucketId,\r\n          sourceKey: fromPath,\r\n          destinationKey: toPath,\r\n          destinationBucket: options?.destinationBucket,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   * @param options The destination options.\r\n   */\r\n  async copy(\r\n    fromPath: string,\r\n    toPath: string,\r\n    options?: DestinationOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/copy`,\r\n        {\r\n          bucketId: this.bucketId,\r\n          sourceKey: fromPath,\r\n          destinationKey: toPath,\r\n          destinationBucket: options?.destinationBucket,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data: { path: data.Key }, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async createSignedUrl(\r\n    path: string,\r\n    expiresIn: number,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      let data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${_path}`,\r\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\r\n        { headers: this.headers }\r\n      )\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\r\n      data = { signedUrl }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\r\n  async createSignedUrls(\r\n    paths: string[],\r\n    expiresIn: number,\r\n    options?: { download: string | boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { error: string | null; path: string | null; signedUrl: string }[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${this.bucketId}`,\r\n        { expiresIn, paths },\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      return {\r\n        data: data.map((datum: { signedURL: string }) => ({\r\n          ...datum,\r\n          signedUrl: datum.signedURL\r\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n            : null,\r\n        })),\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  download<Options extends { transform?: TransformOptions }>(\r\n    path: string,\r\n    options?: Options\r\n  ): BlobDownloadBuilder {\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\r\n    const _path = this._getFinalPath(path)\r\n    const downloadFn = () =>\r\n      get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n      })\r\n    return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing file.\r\n   * @param path\r\n   */\r\n  async info(\r\n    path: string\r\n  ): Promise<\r\n    | {\r\n        data: Camelize<FileObjectV2>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const _path = this._getFinalPath(path)\r\n\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/object/info/${_path}`, {\r\n        headers: this.headers,\r\n      })\r\n\r\n      return { data: recursiveToCamel(data) as Camelize<FileObjectV2>, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks the existence of a file.\r\n   * @param path\r\n   */\r\n  async exists(\r\n    path: string\r\n  ): Promise<\r\n    | {\r\n        data: boolean\r\n        error: null\r\n      }\r\n    | {\r\n        data: boolean\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const _path = this._getFinalPath(path)\r\n\r\n    try {\r\n      await head(this.fetch, `${this.url}/object/${_path}`, {\r\n        headers: this.headers,\r\n      })\r\n\r\n      return { data: true, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error) && error instanceof StorageUnknownError) {\r\n        const originalError = (error.originalError as unknown) as { status: number }\r\n\r\n        if ([400, 404].includes(originalError?.status)) {\r\n          return { data: false, error }\r\n        }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  getPublicUrl(\r\n    path: string,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): { data: { publicUrl: string } } {\r\n    const _path = this._getFinalPath(path)\r\n    const _queryString = []\r\n\r\n    const downloadQueryParam = options?.download\r\n      ? `download=${options.download === true ? '' : options.download}`\r\n      : ''\r\n\r\n    if (downloadQueryParam !== '') {\r\n      _queryString.push(downloadQueryParam)\r\n    }\r\n\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n\r\n    if (transformationQuery !== '') {\r\n      _queryString.push(transformationQuery)\r\n    }\r\n\r\n    let queryString = _queryString.join('&')\r\n    if (queryString !== '') {\r\n      queryString = `?${queryString}`\r\n    }\r\n\r\n    return {\r\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\r\n  async remove(\r\n    paths: string[]\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/object/${this.bucketId}`,\r\n        { prefixes: paths },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\r\n  // async getMetadata(\r\n  //   id: string\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\r\n  // async updateMetadata(\r\n  //   id: string,\r\n  //   meta: Metadata\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await post(\r\n  //       this.fetch,\r\n  //       `${this.url}/metadata/${id}`,\r\n  //       { ...meta },\r\n  //       { headers: this.headers }\r\n  //     )\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Lists all the files and folders within a path of the bucket.\r\n   * @param path The folder path.\r\n   * @param options Search options including limit (defaults to 100), offset, sortBy, and search\r\n   */\r\n  async list(\r\n    path?: string,\r\n    options?: SearchOptions,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @experimental this method signature might change in the future\r\n   * @param options search options\r\n   * @param parameters\r\n   */\r\n  async listV2(\r\n    options?: SearchV2Options,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: SearchV2Result\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...options }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list-v2/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (this.shouldThrowOnError) {\r\n        throw error\r\n      }\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  protected encodeMetadata(metadata: Record<string, any>) {\r\n    return JSON.stringify(metadata)\r\n  }\r\n\r\n  toBase64(data: string) {\r\n    if (typeof Buffer !== 'undefined') {\r\n      return Buffer.from(data).toString('base64')\r\n    }\r\n    return btoa(data)\r\n  }\r\n\r\n  private _getFinalPath(path: string) {\r\n    return `${this.bucketId}/${path.replace(/^\\/+/, '')}`\r\n  }\r\n\r\n  private _removeEmptyFolders(path: string) {\r\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\r\n  }\r\n\r\n  private transformOptsToQueryString(transform: TransformOptions) {\r\n    const params = []\r\n    if (transform.width) {\r\n      params.push(`width=${transform.width}`)\r\n    }\r\n\r\n    if (transform.height) {\r\n      params.push(`height=${transform.height}`)\r\n    }\r\n\r\n    if (transform.resize) {\r\n      params.push(`resize=${transform.resize}`)\r\n    }\r\n\r\n    if (transform.format) {\r\n      params.push(`format=${transform.format}`)\r\n    }\r\n\r\n    if (transform.quality) {\r\n      params.push(`quality=${transform.quality}`)\r\n    }\r\n\r\n    return params.join('&')\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}