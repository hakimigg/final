{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hakimm\\\\Desktop\\\\beta\\\\src\\\\contexts\\\\AdminContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminContext = /*#__PURE__*/createContext();\nexport const useAdmin = () => {\n  _s();\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin must be used within an AdminProvider');\n  }\n  return context;\n};\n_s(useAdmin, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AdminProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      try {\n        if (!supabase) {\n          console.error('Supabase client not initialized');\n          setIsLoading(false);\n          return;\n        }\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (session !== null && session !== void 0 && session.user) {\n          setUser(session.user);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n\n    // Listen for auth changes\n    if (supabase) {\n      const {\n        data: {\n          subscription\n        }\n      } = supabase.auth.onAuthStateChange(async (event, session) => {\n        if (session !== null && session !== void 0 && session.user) {\n          setUser(session.user);\n          setIsAuthenticated(true);\n        } else {\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n        setIsLoading(false);\n      });\n      return () => subscription.unsubscribe();\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Hardcoded admin credentials for security\n      const ADMIN_EMAIL = 'admin@beta-secure-2024';\n      const ADMIN_PASSWORD = 'BetaAdmin#2024!Secure';\n      if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\n        // Create a mock user object for the hardcoded admin\n        const mockUser = {\n          id: 'admin-user-id',\n          email: ADMIN_EMAIL,\n          role: 'admin'\n        };\n        setUser(mockUser);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid admin credentials'\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      if (supabase) {\n        await supabase.auth.signOut();\n      }\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n  const signup = async (email, password) => {\n    try {\n      if (!supabase) {\n        return {\n          success: false,\n          error: 'Supabase client not initialized'\n        };\n      }\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: window.location.origin,\n          data: {\n            email_confirm: true\n          }\n        }\n      });\n      if (error) throw error;\n\n      // For localhost development, we'll consider signup successful immediately\n      if (data.user && !data.user.email_confirmed_at) {\n        return {\n          success: true,\n          data,\n          message: 'Account created successfully! You can now sign in.'\n        };\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    isAuthenticated,\n    isLoading,\n    user,\n    login,\n    logout,\n    signup\n  };\n  return /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s2(AdminProvider, \"fXtsS9VlG56CFg59Ule3HyF3KXk=\");\n_c = AdminProvider;\nvar _c;\n$RefreshReg$(_c, \"AdminProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AdminContext","useAdmin","_s","context","Error","AdminProvider","children","_s2","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","checkAuth","console","error","data","session","auth","getSession","subscription","onAuthStateChange","event","unsubscribe","login","email","password","ADMIN_EMAIL","ADMIN_PASSWORD","mockUser","id","role","success","message","logout","signOut","signup","signUp","options","emailRedirectTo","window","location","origin","email_confirm","email_confirmed_at","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hakimm/Desktop/beta/src/contexts/AdminContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AdminContext = createContext();\n\nexport const useAdmin = () => {\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin must be used within an AdminProvider');\n  }\n  return context;\n};\n\nexport const AdminProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      try {\n        if (!supabase) {\n          console.error('Supabase client not initialized');\n          setIsLoading(false);\n          return;\n        }\n\n        const { data: { session } } = await supabase.auth.getSession();\n        if (session?.user) {\n          setUser(session.user);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n\n    // Listen for auth changes\n    if (supabase) {\n      const { data: { subscription } } = supabase.auth.onAuthStateChange(\n        async (event, session) => {\n          if (session?.user) {\n            setUser(session.user);\n            setIsAuthenticated(true);\n          } else {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n          setIsLoading(false);\n        }\n      );\n\n      return () => subscription.unsubscribe();\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      // Hardcoded admin credentials for security\n      const ADMIN_EMAIL = 'admin@beta-secure-2024';\n      const ADMIN_PASSWORD = 'BetaAdmin#2024!Secure';\n\n      if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\n        // Create a mock user object for the hardcoded admin\n        const mockUser = {\n          id: 'admin-user-id',\n          email: ADMIN_EMAIL,\n          role: 'admin'\n        };\n        \n        setUser(mockUser);\n        setIsAuthenticated(true);\n        return { success: true };\n      } else {\n        return { success: false, error: 'Invalid admin credentials' };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (supabase) {\n        await supabase.auth.signOut();\n      }\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const signup = async (email, password) => {\n    try {\n      if (!supabase) {\n        return { success: false, error: 'Supabase client not initialized' };\n      }\n\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: window.location.origin,\n          data: {\n            email_confirm: true\n          }\n        }\n      });\n\n      if (error) throw error;\n\n      // For localhost development, we'll consider signup successful immediately\n      if (data.user && !data.user.email_confirmed_at) {\n        return { \n          success: true, \n          data,\n          message: 'Account created successfully! You can now sign in.' \n        };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const value = {\n    isAuthenticated,\n    isLoading,\n    user,\n    login,\n    logout,\n    signup,\n  };\n\n  return (\n    <AdminContext.Provider value={value}>\n      {children}\n    </AdminContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}