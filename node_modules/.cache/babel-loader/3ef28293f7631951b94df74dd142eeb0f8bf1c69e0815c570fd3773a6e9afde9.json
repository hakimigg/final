{"ast":null,"code":"import{supabase}from'../lib/supabase';// Storage bucket name\nconst STORAGE_BUCKET='product-images';/**\n * Upload an image file to Supabase Storage\n * @param {File} file - The image file to upload\n * @param {string} folder - Optional folder path (e.g., 'products', 'gallery')\n * @returns {Promise<{success: boolean, url?: string, error?: string}>}\n */export const uploadImage=async function(file){let folder=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'products';try{if(!file){return{success:false,error:'No file provided'};}// Validate file type\nif(!file.type.startsWith('image/')){return{success:false,error:'File must be an image'};}// Validate file size (max 5MB)\nconst maxSize=5*1024*1024;// 5MB\nif(file.size>maxSize){return{success:false,error:'File size must be less than 5MB'};}// Generate unique filename\nconst fileExt=file.name.split('.').pop();const fileName=\"\".concat(folder,\"/\").concat(Date.now(),\"-\").concat(Math.random().toString(36).substring(2),\".\").concat(fileExt);// Upload file to Supabase Storage\nconst{data,error}=await supabase.storage.from(STORAGE_BUCKET).upload(fileName,file,{cacheControl:'3600',upsert:false});if(error){console.error('Upload error:',error);return{success:false,error:error.message};}// Get public URL\nconst{data:{publicUrl}}=supabase.storage.from(STORAGE_BUCKET).getPublicUrl(fileName);return{success:true,url:publicUrl};}catch(error){console.error('Upload error:',error);return{success:false,error:'Failed to upload image'};}};/**\n * Delete an image from Supabase Storage\n * @param {string} url - The public URL of the image to delete\n * @returns {Promise<{success: boolean, error?: string}>}\n */export const deleteImage=async url=>{try{if(!url){return{success:false,error:'No URL provided'};}// Extract file path from URL\nconst urlParts=url.split('/');const bucketIndex=urlParts.findIndex(part=>part===STORAGE_BUCKET);if(bucketIndex===-1){return{success:false,error:'Invalid image URL'};}const filePath=urlParts.slice(bucketIndex+1).join('/');// Delete file from Supabase Storage\nconst{error}=await supabase.storage.from(STORAGE_BUCKET).remove([filePath]);if(error){console.error('Delete error:',error);return{success:false,error:error.message};}return{success:true};}catch(error){console.error('Delete error:',error);return{success:false,error:'Failed to delete image'};}};/**\n * Upload multiple images\n * @param {File[]} files - Array of image files to upload\n * @param {string} folder - Optional folder path\n * @returns {Promise<{success: boolean, urls?: string[], errors?: string[]}>}\n */export const uploadMultipleImages=async function(files){let folder=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'gallery';try{const uploadPromises=files.map(file=>uploadImage(file,folder));const results=await Promise.all(uploadPromises);const successfulUploads=results.filter(result=>result.success);const failedUploads=results.filter(result=>!result.success);const urls=successfulUploads.map(result=>result.url);const errors=failedUploads.map(result=>result.error);return{success:successfulUploads.length>0,urls,errors:errors.length>0?errors:undefined};}catch(error){console.error('Multiple upload error:',error);return{success:false,errors:['Failed to upload images']};}};/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {{valid: boolean, error?: string}}\n */export const validateImageFile=file=>{if(!file){return{valid:false,error:'No file provided'};}if(!file.type.startsWith('image/')){return{valid:false,error:'File must be an image'};}const maxSize=5*1024*1024;// 5MB\nif(file.size>maxSize){return{valid:false,error:'File size must be less than 5MB'};}const allowedTypes=['image/jpeg','image/jpg','image/png','image/webp'];if(!allowedTypes.includes(file.type)){return{valid:false,error:'Only JPEG, PNG, and WebP images are allowed'};}return{valid:true};};","map":{"version":3,"names":["supabase","STORAGE_BUCKET","uploadImage","file","folder","arguments","length","undefined","success","error","type","startsWith","maxSize","size","fileExt","name","split","pop","fileName","concat","Date","now","Math","random","toString","substring","data","storage","from","upload","cacheControl","upsert","console","message","publicUrl","getPublicUrl","url","deleteImage","urlParts","bucketIndex","findIndex","part","filePath","slice","join","remove","uploadMultipleImages","files","uploadPromises","map","results","Promise","all","successfulUploads","filter","result","failedUploads","urls","errors","validateImageFile","valid","allowedTypes","includes"],"sources":["C:/Users/hakimm/Desktop/beta/src/utils/imageUpload.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\n\n// Storage bucket name\nconst STORAGE_BUCKET = 'product-images';\n\n/**\n * Upload an image file to Supabase Storage\n * @param {File} file - The image file to upload\n * @param {string} folder - Optional folder path (e.g., 'products', 'gallery')\n * @returns {Promise<{success: boolean, url?: string, error?: string}>}\n */\nexport const uploadImage = async (file, folder = 'products') => {\n  try {\n    if (!file) {\n      return { success: false, error: 'No file provided' };\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      return { success: false, error: 'File must be an image' };\n    }\n\n    // Validate file size (max 5MB)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      return { success: false, error: 'File size must be less than 5MB' };\n    }\n\n    // Generate unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${folder}/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n    // Upload file to Supabase Storage\n    const { data, error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .upload(fileName, file, {\n        cacheControl: '3600',\n        upsert: false\n      });\n\n    if (error) {\n      console.error('Upload error:', error);\n      return { success: false, error: error.message };\n    }\n\n    // Get public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from(STORAGE_BUCKET)\n      .getPublicUrl(fileName);\n\n    return { success: true, url: publicUrl };\n  } catch (error) {\n    console.error('Upload error:', error);\n    return { success: false, error: 'Failed to upload image' };\n  }\n};\n\n/**\n * Delete an image from Supabase Storage\n * @param {string} url - The public URL of the image to delete\n * @returns {Promise<{success: boolean, error?: string}>}\n */\nexport const deleteImage = async (url) => {\n  try {\n    if (!url) {\n      return { success: false, error: 'No URL provided' };\n    }\n\n    // Extract file path from URL\n    const urlParts = url.split('/');\n    const bucketIndex = urlParts.findIndex(part => part === STORAGE_BUCKET);\n    \n    if (bucketIndex === -1) {\n      return { success: false, error: 'Invalid image URL' };\n    }\n\n    const filePath = urlParts.slice(bucketIndex + 1).join('/');\n\n    // Delete file from Supabase Storage\n    const { error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([filePath]);\n\n    if (error) {\n      console.error('Delete error:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Delete error:', error);\n    return { success: false, error: 'Failed to delete image' };\n  }\n};\n\n/**\n * Upload multiple images\n * @param {File[]} files - Array of image files to upload\n * @param {string} folder - Optional folder path\n * @returns {Promise<{success: boolean, urls?: string[], errors?: string[]}>}\n */\nexport const uploadMultipleImages = async (files, folder = 'gallery') => {\n  try {\n    const uploadPromises = files.map(file => uploadImage(file, folder));\n    const results = await Promise.all(uploadPromises);\n\n    const successfulUploads = results.filter(result => result.success);\n    const failedUploads = results.filter(result => !result.success);\n\n    const urls = successfulUploads.map(result => result.url);\n    const errors = failedUploads.map(result => result.error);\n\n    return {\n      success: successfulUploads.length > 0,\n      urls,\n      errors: errors.length > 0 ? errors : undefined\n    };\n  } catch (error) {\n    console.error('Multiple upload error:', error);\n    return { success: false, errors: ['Failed to upload images'] };\n  }\n};\n\n/**\n * Validate image file\n * @param {File} file - The file to validate\n * @returns {{valid: boolean, error?: string}}\n */\nexport const validateImageFile = (file) => {\n  if (!file) {\n    return { valid: false, error: 'No file provided' };\n  }\n\n  if (!file.type.startsWith('image/')) {\n    return { valid: false, error: 'File must be an image' };\n  }\n\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  if (file.size > maxSize) {\n    return { valid: false, error: 'File size must be less than 5MB' };\n  }\n\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  if (!allowedTypes.includes(file.type)) {\n    return { valid: false, error: 'Only JPEG, PNG, and WebP images are allowed' };\n  }\n\n  return { valid: true };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}